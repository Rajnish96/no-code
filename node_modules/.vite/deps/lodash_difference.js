import {
  require_arrayIncludes,
  require_arrayIncludesWith
} from "./chunk-X3QGPYFG.js";
import {
  require_isArrayLikeObject
} from "./chunk-BUBHTFR7.js";
import {
  require_baseFlatten
} from "./chunk-H3VE2YIM.js";
import {
  require_baseRest
} from "./chunk-L3HEE2JS.js";
import "./chunk-P6LXTWFC.js";
import "./chunk-GXZMSAR3.js";
import {
  require_arrayMap
} from "./chunk-YUYH4FCQ.js";
import "./chunk-XOZNM36G.js";
import {
  require_SetCache,
  require_cacheHas
} from "./chunk-3T5TGVWB.js";
import "./chunk-OI7LQB45.js";
import {
  require_baseUnary
} from "./chunk-JG5LYOOF.js";
import "./chunk-THPHXGN4.js";
import "./chunk-JZ5U4CZR.js";
import "./chunk-7PB2PNRO.js";
import "./chunk-W53HYEPW.js";
import "./chunk-FK3LLKWB.js";
import "./chunk-E3NM4O75.js";
import "./chunk-CW5QO2B7.js";
import "./chunk-AOALHNJY.js";
import {
  __commonJS
} from "./chunk-HUBM7RA2.js";

// ../../node_modules/lodash/_baseDifference.js
var require_baseDifference = __commonJS({
  "../../node_modules/lodash/_baseDifference.js"(exports, module) {
    var SetCache = require_SetCache();
    var arrayIncludes = require_arrayIncludes();
    var arrayIncludesWith = require_arrayIncludesWith();
    var arrayMap = require_arrayMap();
    var baseUnary = require_baseUnary();
    var cacheHas = require_cacheHas();
    var LARGE_ARRAY_SIZE = 200;
    function baseDifference(array, values, iteratee, comparator) {
      var index = -1, includes = arrayIncludes, isCommon = true, length = array.length, result = [], valuesLength = values.length;
      if (!length) {
        return result;
      }
      if (iteratee) {
        values = arrayMap(values, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      } else if (values.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
      }
      outer:
        while (++index < length) {
          var value = array[index], computed = iteratee == null ? value : iteratee(value);
          value = comparator || value !== 0 ? value : 0;
          if (isCommon && computed === computed) {
            var valuesIndex = valuesLength;
            while (valuesIndex--) {
              if (values[valuesIndex] === computed) {
                continue outer;
              }
            }
            result.push(value);
          } else if (!includes(values, computed, comparator)) {
            result.push(value);
          }
        }
      return result;
    }
    module.exports = baseDifference;
  }
});

// ../../node_modules/lodash/difference.js
var require_difference = __commonJS({
  "../../node_modules/lodash/difference.js"(exports, module) {
    var baseDifference = require_baseDifference();
    var baseFlatten = require_baseFlatten();
    var baseRest = require_baseRest();
    var isArrayLikeObject = require_isArrayLikeObject();
    var difference = baseRest(function(array, values) {
      return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true)) : [];
    });
    module.exports = difference;
  }
});
export default require_difference();
//# sourceMappingURL=lodash_difference.js.map
